import pandas as pd
import numpy as np
from datetime import datetime
import openpyxl

# Function to convert date format
def convert_date_format(date_str):
    try:
        # Extract the year and month from the string
        date_part = date_str.split(' ')[2]  # 'yyyy-mm'
        return pd.to_datetime(date_part, format='%Y-%m')
    except:
        return None

# Function to calculate rolling volatility
def rolling_volatility(returns, window):
    return returns.rolling(window).std() * np.sqrt(12)  # Annualized volatility

# Function to calculate maximum drawdown and dates
def max_drawdown(returns):
    cumulative = (1 + returns).cumprod()
    running_max = cumulative.cummax()
    drawdown = (cumulative - running_max) / running_max
    max_dd = drawdown.min()

    trough_date = drawdown.idxmin()
    peak_date = cumulative[:trough_date].idxmax()

    # Recovery date: when cumulative returns exceed the previous peak
    recovery_date = cumulative[trough_date:].loc[cumulative[trough_date:] >= running_max[peak_date]].first_valid_index()
    
    return max_dd, peak_date, trough_date, recovery_date

# Read Excel file
file_path = 'your_file_path_here.xlsx'
df = pd.read_excel(file_path, sheet_name='Sheet2')

# Clean up the dates in column A
df['Date'] = df.iloc[:, 0].apply(convert_date_format)

# Set the Date as the index and drop the original Date column
df.set_index('Date', inplace=True)
df = df.drop(df.columns[0], axis=1)  # Drop the first column, which had date strings

# Calculate metrics for each fund
results = {}
for fund in df.columns:
    fund_data = df[fund].dropna()  # Drop any missing data for the fund
    
    # Calculate rolling returns
    last_3_months = fund_data[-3:].mean()
    last_6_months = fund_data[-6:].mean()
    ytd_return = fund_data[fund_data.index.year == datetime.now().year].mean()
    
    # Calculate annualized returns (assuming monthly returns are provided)
    three_year_annualized = (1 + fund_data[-36:].mean())**12 - 1
    five_year_annualized = (1 + fund_data[-60:].mean())**12 - 1
    
    # Calculate volatilities
    vol_3_month = rolling_volatility(fund_data, 3).iloc[-1]
    vol_6_month = rolling_volatility(fund_data, 6).iloc[-1]
    
    # Calculate max drawdown
    max_dd, peak_date, trough_date, recovery_date = max_drawdown(fund_data)

    # Store results
    results[fund] = {
        '3 Month Return': last_3_months,
        '6 Month Return': last_6_months,
        'YTD Return': ytd_return,
        '3 Year Annualized Return': three_year_annualized,
        '5 Year Annualized Return': five_year_annualized,
        '3 Month Volatility': vol_3_month,
        '6 Month Volatility': vol_6_month,
        'Max Drawdown': max_dd,
        'Peak Date': peak_date,
        'Trough Date': trough_date,
        'Recovery Date': recovery_date
    }

# Convert results to a DataFrame for easier saving
results_df = pd.DataFrame(results).T

# Write to a new Excel file
results_df.to_excel('funds_analysis.xlsx')
