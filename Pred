import pandas as pd
import numpy as np
from openpyxl import Workbook
from datetime import datetime

def read_excel_file(file_path):
    # Read the Excel file
    df = pd.read_excel(file_path, sheet_name='Sheet2', header=1)
    
    # Convert date strings to datetime objects
    df['Date'] = df.iloc[:, 0].apply(lambda x: datetime.strptime(x.split()[-2], '%Y-%m'))
    
    # Set 'Date' as index and drop the original date column
    df = df.set_index('Date').drop(df.columns[0], axis=1)
    
    return df

def calculate_return(series):
    return series.pct_change().iloc[-3:].mean()

def calculate_volatility(series):
    return series.pct_change().iloc[-3:].std() * np.sqrt(12)

def calculate_drawdown(series):
    cumulative_returns = (1 + series.pct_change()).cumprod()
    running_max = cumulative_returns.cummax()
    drawdown = (cumulative_returns - running_max) / running_max
    
    max_drawdown = drawdown.min()
    peak_date = running_max[drawdown == max_drawdown].index[0]
    trough_date = drawdown[drawdown == max_drawdown].index[0]
    
    try:
        recovery_date = drawdown[drawdown.index > trough_date][drawdown >= 0].index[0]
    except IndexError:
        recovery_date = "Not recovered"
    
    return max_drawdown, peak_date, trough_date, recovery_date

def process_file(input_file, output_file):
    df = read_excel_file(input_file)
    
    results = []
    
    for fund in df.columns:
        returns = calculate_return(df[fund])
        volatility = calculate_volatility(df[fund])
        max_drawdown, peak_date, trough_date, recovery_date = calculate_drawdown(df[fund])
        
        results.append({
            'Fund': fund,
            'Return': returns,
            'Volatility': volatility,
            'Max Drawdown': max_drawdown,
            'Peak Date': peak_date,
            'Trough Date': trough_date,
            'Recovery Date': recovery_date
        })
    
    results_df = pd.DataFrame(results)
    
    # Create a new Excel file
    wb = Workbook()
    ws = wb.active
    ws.title = "Fund Analysis"
    
    # Write the DataFrame to the Excel file
    for r in pd.DataFrame(results_df).itertuples():
        ws.append(r[1:])
    
    # Save the file
    wb.save(output_file)

# Usage
input_file = 'path/to/your/input_file.xlsx'
output_file = 'path/to/your/output_file.xlsx'
process_file(input_file, output_file)
