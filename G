from multiprocessing import Pool
from PIL import Image
import numpy as np
from matplotlib import cm

RESOLUTION = 2000
xmin, xmax, ymin, ymax = -2.0, 1.0, -1.5, 1.5
width = xmax - xmin
height = ymax - ymin
CHUNK_SIZE = 1000
max_iter = 1000

def buddhabrot(c):
    z = c
    trajectory = [c]
    history = set()
    for i in range(max_iter):
        if abs(z) > 4.0:
            return trajectory
        if z in history:
            return []
        history.add(z)
        z = z * z + c
        trajectory.append(z)
    return []

def calculate_chunk(i, j):
    xmin_chunk = xmin + i * width * CHUNK_SIZE / RESOLUTION + width/RESOLUTION/2
    xmax_chunk = xmin + (i + 1) * width * CHUNK_SIZE / RESOLUTION - width/RESOLUTION/2
    ymin_chunk = ymin + j * height * CHUNK_SIZE / RESOLUTION + height/RESOLUTION/2
    ymax_chunk = ymin + (j + 1) * height * CHUNK_SIZE / RESOLUTION - height/RESOLUTION/2

    r1 = np.linspace(xmin_chunk, xmax_chunk, CHUNK_SIZE)
    r2 = np.linspace(ymin_chunk, ymax_chunk, CHUNK_SIZE)
    meshgrid = np.meshgrid(r1, r2)

    pixels = [(complex(r, i), max_iter) for r, i in zip(np.ravel(meshgrid[0]), np.ravel(meshgrid[1]))]
    trajectories = [buddhabrot_helper(pixel) for pixel in pixels]

    return trajectories

def buddhabrot_helper(inputs):
    c, max_iter = inputs
    if is_inside_main_bulb(c):
        return []
    return buddhabrot(c)

def is_inside_main_bulb(c):
    q = (c.real - 1/4) * 2 + c.imag * 2
    return q * (q + (c.real - 1/4)) < c.imag**2 / 4

def calculate_density(trajectories):
    density = np.zeros((RESOLUTION, RESOLUTION))
    for trajectory in trajectories:
        for z in trajectory:
            x = int((z.real - xmin) * RESOLUTION / width)
            y = int((z.imag - ymin) * RESOLUTION / height)
            if 0 <= x < RESOLUTION and 0 <= y < RESOLUTION:
                density[x, y] += 1
    return density

def apply_sqrt_log_coloring(density):
    density = np.sqrt(density)
    density = np.log10(density + 1)
    density = density / np.max(density)
    return density

trajectories = []
pool = Pool(processes=None)
for i in range(RESOLUTION // CHUNK_SIZE):
    for j in range(RESOLUTION // CHUNK_SIZE):
        chunk_trajectories = calculate_chunk(i, j)
        trajectories.extend(chunk_trajectories)
pool.close()

density = calculate_density(trajectories)
density = apply_sqrt_log_coloring(density)
color_data = cm.viridis(density)
image = Image.fromarray((255 * color_data).astype(np.uint8))
image.save("buddhabrot_traj.png")

